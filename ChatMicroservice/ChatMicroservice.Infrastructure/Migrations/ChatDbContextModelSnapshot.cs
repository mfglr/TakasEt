// <auto-generated />
using System;
using ChatMicroservice.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatMicroservice.Infrastructure.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    partial class ChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatMicroservice.Domain.ConnectionAggregate.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.ConversationAggregate.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.ConversationAggregate.ConversationUserRemoving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("ConversationUserRemoving");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.GroupAggregate.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.GroupAggregate.GroupImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupImage");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.GroupAggregate.GroupUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.GroupAggregate.GroupUserRequestToJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("IdOfUserApprovingOrCancellingRequest")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupUserRequestToJoin");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizeContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfImages")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("GroupId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageImage");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageUserLiking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageUserLiking");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageUserReceiving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageUserReceiving");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageUserRemoving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageUserRemoving");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageUserViewing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageUserViewing");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.ConversationAggregate.ConversationUserRemoving", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.ConversationAggregate.Conversation", null)
                        .WithMany("UsersWhoRemovedTheEntity")
                        .HasForeignKey("ConversationId");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.GroupAggregate.Group", b =>
                {
                    b.OwnsOne("ChatMicroservice.Domain.GroupAggregate.GroupType", "GroupType", b1 =>
                        {
                            b1.Property<int>("GroupId")
                                .HasColumnType("int");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("Type");

                            b1.HasKey("GroupId");

                            b1.ToTable("Groups");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");
                        });

                    b.Navigation("GroupType")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatMicroservice.Domain.GroupAggregate.GroupImage", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.GroupAggregate.Group", null)
                        .WithMany("Images")
                        .HasForeignKey("GroupId");

                    b.OwnsOne("SharedLibrary.ValueObjects.ContainerName", "ContainerName", b1 =>
                        {
                            b1.Property<int>("GroupImageId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ContainerName");

                            b1.HasKey("GroupImageId");

                            b1.ToTable("GroupImage");

                            b1.WithOwner()
                                .HasForeignKey("GroupImageId");
                        });

                    b.OwnsOne("SharedLibrary.ValueObjects.Dimension", "Dimension", b1 =>
                        {
                            b1.Property<int>("GroupImageId")
                                .HasColumnType("int");

                            b1.Property<float>("AspectRatio")
                                .HasColumnType("real")
                                .HasColumnName("AspectRatio");

                            b1.Property<int>("Height")
                                .HasColumnType("int")
                                .HasColumnName("Height");

                            b1.Property<int>("Width")
                                .HasColumnType("int")
                                .HasColumnName("Width");

                            b1.HasKey("GroupImageId");

                            b1.ToTable("GroupImage");

                            b1.WithOwner()
                                .HasForeignKey("GroupImageId");
                        });

                    b.Navigation("ContainerName")
                        .IsRequired();

                    b.Navigation("Dimension")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatMicroservice.Domain.GroupAggregate.GroupUser", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.GroupAggregate.Group", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.OwnsOne("ChatMicroservice.Domain.GroupAggregate.UserRole", "Role", b1 =>
                        {
                            b1.Property<int>("GroupUserId")
                                .HasColumnType("int");

                            b1.Property<int>("Role")
                                .HasColumnType("int")
                                .HasColumnName("Role");

                            b1.HasKey("GroupUserId");

                            b1.ToTable("GroupUser");

                            b1.WithOwner()
                                .HasForeignKey("GroupUserId");
                        });

                    b.Navigation("Role")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatMicroservice.Domain.GroupAggregate.GroupUserRequestToJoin", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.GroupAggregate.Group", null)
                        .WithMany("UsersWhoWantsToJoinTheGroup")
                        .HasForeignKey("GroupId");

                    b.OwnsOne("ChatMicroservice.Domain.GroupAggregate.StateOfGroupJoinRequest", "State", b1 =>
                        {
                            b1.Property<int>("GroupUserRequestToJoinId")
                                .HasColumnType("int");

                            b1.Property<int>("Status")
                                .HasColumnType("int")
                                .HasColumnName("Status");

                            b1.HasKey("GroupUserRequestToJoinId");

                            b1.ToTable("GroupUserRequestToJoin");

                            b1.WithOwner()
                                .HasForeignKey("GroupUserRequestToJoinId");
                        });

                    b.Navigation("State")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.Message", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.ConversationAggregate.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId");

                    b.HasOne("ChatMicroservice.Domain.GroupAggregate.Group", null)
                        .WithMany("Messages")
                        .HasForeignKey("GroupId");

                    b.OwnsOne("ChatMicroservice.Domain.MessageEntity.MessageState", "MessageState", b1 =>
                        {
                            b1.Property<int>("MessageId")
                                .HasColumnType("int");

                            b1.Property<int>("Status")
                                .HasColumnType("int")
                                .HasColumnName("Status");

                            b1.HasKey("MessageId");

                            b1.ToTable("Messages");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");
                        });

                    b.Navigation("MessageState")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageImage", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.MessageEntity.Message", null)
                        .WithMany("MessageImages")
                        .HasForeignKey("MessageId");

                    b.OwnsOne("SharedLibrary.ValueObjects.ContainerName", "ContainerName", b1 =>
                        {
                            b1.Property<int>("MessageImageId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ContainerName");

                            b1.HasKey("MessageImageId");

                            b1.ToTable("MessageImage");

                            b1.WithOwner()
                                .HasForeignKey("MessageImageId");
                        });

                    b.OwnsOne("SharedLibrary.ValueObjects.Dimension", "Dimension", b1 =>
                        {
                            b1.Property<int>("MessageImageId")
                                .HasColumnType("int");

                            b1.Property<float>("AspectRatio")
                                .HasColumnType("real")
                                .HasColumnName("AspectRatio");

                            b1.Property<int>("Height")
                                .HasColumnType("int")
                                .HasColumnName("Height");

                            b1.Property<int>("Width")
                                .HasColumnType("int")
                                .HasColumnName("Width");

                            b1.HasKey("MessageImageId");

                            b1.ToTable("MessageImage");

                            b1.WithOwner()
                                .HasForeignKey("MessageImageId");
                        });

                    b.Navigation("ContainerName")
                        .IsRequired();

                    b.Navigation("Dimension")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageUserLiking", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.MessageEntity.Message", null)
                        .WithMany("UsersWhoLikedTheEntity")
                        .HasForeignKey("MessageId");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageUserReceiving", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.MessageEntity.Message", null)
                        .WithMany("UsersWhoReceivedTheMessage")
                        .HasForeignKey("MessageId");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageUserRemoving", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.MessageEntity.Message", null)
                        .WithMany("UsersWhoRemovedTheEntity")
                        .HasForeignKey("MessageId");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.MessageUserViewing", b =>
                {
                    b.HasOne("ChatMicroservice.Domain.MessageEntity.Message", null)
                        .WithMany("UsersWhoViewedTheEntity")
                        .HasForeignKey("MessageId");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.ConversationAggregate.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UsersWhoRemovedTheEntity");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.GroupAggregate.Group", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Messages");

                    b.Navigation("Users");

                    b.Navigation("UsersWhoWantsToJoinTheGroup");
                });

            modelBuilder.Entity("ChatMicroservice.Domain.MessageEntity.Message", b =>
                {
                    b.Navigation("MessageImages");

                    b.Navigation("UsersWhoLikedTheEntity");

                    b.Navigation("UsersWhoReceivedTheMessage");

                    b.Navigation("UsersWhoRemovedTheEntity");

                    b.Navigation("UsersWhoViewedTheEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
